// esbuild.config.mjs
import esbuild from "esbuild";
import process from "process";
// import builtins from "builtin-modules"; // Only if you were using it explicitly

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Define your build options in an object
const buildOptions = {
    banner: {
        js: banner,
    },
    entryPoints: ["./src/main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete", "@codemirror/collab", "@codemirror/commands",
        "@codemirror/language", "@codemirror/lint", "@codemirror/search",
        "@codemirror/state", "@codemirror/view", "@lezer/common", "@lezer/highlight",
        "@lezer/lr",
        // Node built-ins are generally handled by platform: 'node'
    ],
    format: "cjs",
    platform: "node", // This should help with the "node:fs/promises" errors
    target: "es2018", 
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
};

// Use esbuild.context() for watch mode
if (!prod) {
    esbuild.context(buildOptions).then(ctx => {
        console.log("esbuild is watching for changes...");
        ctx.watch();
    }).catch(failure => {
        console.error("esbuild watch failed:", failure);
        process.exit(1);
    });
} else {
    // For production build, just use esbuild.build()
    esbuild.build(buildOptions).catch(failure => {
        console.error("esbuild production build failed:", failure);
        process.exit(1);
    });
}